WORKFLOW
- human identifies HTML <section> ... </section> block to templatise
- adds data-revision="5" attribute
- runs "xweb", which:
 > in all HTML files recursively, identifies all sections with matching id
 > determines highest revision number, erroring out if multiple
 > replaces all sections with matching id, updating latest data-xweb attribute
 > prints how many section ids updated

IMPLEMENTATION
- per-file struct has:
 > file pointer
 > html tree
 > updated flag

- per-section struct has:
 > id
 > highest revision
 > list of html nodes to replace
 > pointer to per-file struct to set writeback flag

- for each html file found via filepath.Walk:
 > use golang.org/x/net/html [updating via file, err := os.OpenFile("sample.html", os.O_RDWR | os.O_TRUNC, 0644); html.Render(file, doc)]
 > create per-file datastructure
 > for each "section" element, stored by id
   > if a "data-xdeb" attribute present, store revision if higher
   > if multiple highest revisions, error out

- for each per-section struct:
 > if highest revision is 0, skip
 > iterate HTML node list, performing deep copy, preseving attributes eg class
 > set linked per-file writeback flag

- for each file struct:
 > if writeback set, rerender to file

TODO
- initial setup mode
 > warn for unannotated sections
